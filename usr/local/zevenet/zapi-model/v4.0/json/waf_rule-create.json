{
   "action" : "create",
   "description" : "There are 3 types of rules available. This call lets to create any of them. Also, it is possible to create rules using the SecLang syntax. They are called custom and are modified by the raw field.",
   "method" : "POST",
   "params" : {
      "audit" : {
         "depend_on" : "rule_id==defined",
         "description" : "This parameter overwritten the audit set rule parameter for the current rule in the case the rule matches. If it has the value true, the rule will always report in the audit log; If it has the value false, in the case that a match, the rule will never report to the audit log; if the default behavior is desired, set as blank string.",
         "regex" : "(?^:(?:(?^:(?:true|false))|))"
      },
      "copy_from" : {
         "depend_on" : "raw==undefined && mark==undefined && rule_id==undefined",
         "depend_on_msg" : "if this parameter is configured, no one more is expected",
         "description" : "It is the WAF rule id, it is showed in the rule_id field of a rule object of type action.",
         "non_blank" : "true",
         "regex" : "(?^:\\d+)"
      },
      "description" : {
         "depend_on" : "rule_id==defined",
         "description" : "It is a descriptive message for the rule.",
         "negated_regex" : "(?^:\\n)"
      },
      "execute" : {
         "depend_on" : "rule_id==defined",
         "description" : "It is the path to an LUA script. This script will be executed when the rule matches. The script must exist before configuring this parameter."
      },
      "log" : {
         "depend_on" : "rule_id==defined",
         "description" : "If this parameter has the value true, the rule will log in a successful match. To not log, the parameter has to be set with the value false. If the value is set to blank the ruleset parameter default_log will be executed.",
         "regex" : "(?^:(?:(?^:(?:true|false))|))"
      },
      "mark" : {
         "depend_on" : "raw==undefined && copy_from==undefined && rule_id==undefined",
         "depend_on_msg" : "if this parameter is configured, no one more is expected",
         "description" : "It is a name for the mark. It will be used to use it.",
         "non_blank" : "true"
      },
      "phase" : {
         "depend_on" : "rule_id==defined",
         "description" : "The phase represents the point of the HTTP request where a rule will be executed. The possible values are 1, it is executed when the request headers are received; 2, it is executed when the body request is received; 3, it is executed when the response headers are received; 4, it is executed when the response body is received; or 5, it is executed just before logging.",
         "regex" : "(?^:(?:[1-5]|request|response|logging))"
      },
      "raw" : {
         "depend_on" : "mark==undefined && copy_from==undefined && rule_id==undefined",
         "depend_on_msg" : "if this parameter is configured, no one more is expected",
         "description" : "It is the WAF rule shown as a string with all its parameters. This field accepts any kind of rule, or batch of rules, that matches with SecLang syntax.",
         "non_blank" : "true"
      },
      "redirect_url" : {
         "depend_on" : "rule_id==defined",
         "description" : "It is the URL where redirecting the client in the case that the resolution redirect is executed. This parameter can be set only when the rule resolution has the value redirect."
      },
      "resolution" : {
         "depend_on" : "rule_id==defined",
         "description" : "To execute this action, it is necessary to have configured the ruleset parameter status to true. This parameter is the action to apply when a WAF rule matches. The possible values are: pass, the rule will apply the other options configured (log, execute…) and the request won’t be cut. The following rules will be checked; deny, ends the connection, the following rules won’t be executed; redirect, the client will be redirected to the URL configured in the parameter redirect_url; default_action, the rule will execute the action that was set in the ruleset parameter default_action.",
         "values" : [
            "pass",
            "allow",
            "deny",
            "redirect",
            "default_action"
         ]
      },
      "rule_id" : {
         "depend_on" : "raw==undefined && copy_from==undefined && mark==undefined",
         "depend_on_msg" : "if this parameter is configured: mark, copy_from and raw could not appear in request",
         "description" : "",
         "regex" : "(?^:\\d+)"
      },
      "severity" : {
         "depend_on" : "rule_id==defined",
         "description" : "",
         "regex" : "(?^:[0-9])"
      },
      "skip" : {
         "depend_on" : "rule_id==defined",
         "description" : "",
         "regex" : "(?^:[0-9]+)"
      },
      "skip_after" : {
         "depend_on" : "rule_id==defined",
         "description" : "",
         "regex" : "(?^:\\w+)"
      },
      "tag" : {
         "depend_on" : "rule_id==defined",
         "ref" : "array"
      }
   },
   "url" : "/ipds/waf/<name>/rules"
}
