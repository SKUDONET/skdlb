#!/usr/bin/perl
###############################################################################
#
#    Skudonet Software License
#    This file is part of the Skudonet Load Balancer software package.
#
#    Copyright (C) 2014-today SKUDONET SL, Sevilla (Spain)
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################

##farmguardian 4.1
#this script is a service that check all Bakends or servers in a farm
#using a script to monitorice the status of backends.  If the execution script return
# <> 0 this script put in blacklist the backendserver. This script check
#the timeout execution of a script
#parameters:
#
#	>./farmguardian farmname [-s <service>] [-l]
#
#fileconfig_penguardian structure:
#[farmname]:::[timeout]:::[timetocheck]:::[script args]:::[logs]

use strict;
use warnings;

#use Data::Dumper;
use Proc::Daemon;
use POSIX ":sys_wait_h";

use Skudonet::Log;
use Skudonet::Config;
use Skudonet::Farm::Core;
use Skudonet::FarmGuardian;

my $zcluster_send_action = "/usr/local/skudonet/bin/zcluster-send-action";
my $configdir            = &getGlobalConfiguration( 'configdir' );
my $libexec_dir          = &getGlobalConfiguration( 'libexec_dir' );
my $fgmarkbin            = &getGlobalConfiguration( 'fgmark' );


# print usage help if no argument was given
if ( !defined $ARGV[0] )
{
	&printHelp();
	exit 1;
}

# declare global variables
my $farmname = shift @ARGV;
my $service  = '';
my $fservice = '';
my $logging  = 'disabled';
my $useAlias = 'false';
my $fg_conf;
my $timetocheck;
my $timeout;
my $check_cmd_tpl;
my $http_prio;
my $cutConns;
my $pidfile;

# validate FARM TYPE
my $type = &getFarmType( $farmname );
unless ( $type =~ /^(?:http|https|l4xnat)$/ )
{
	my $msg = "FarmGuardian does not support $type farm profile";
	&zenlog( $msg );
	exit -1;
}

## Get commandline arguments
my $arg;
for ( my $it = 0 ; $it <= $#ARGV ; $it++ )
{
	$arg = $ARGV[$it];

	#~ shift @ARGV;
	if ( $arg eq "-s" )
	{
		print "it : $it\n";
		$service  = $ARGV[++$it];
		$fservice = "${service}_";
	}
	elsif ( $arg eq "-l" )
	{
		$logging = 'enabled';
	}
	else
	{
		&printHelp();
		exit 1;
	}
}

# declare config files/path
$pidfile = "${farmname}_${fservice}guardian.pid";

my $fgname = &getFGFarm( $farmname, $service );
if ( !$fgname )
{
	my $ms  = ( $service ) ? "farm $farmname, service $service" : "farm $farmname";
	my $msg = "Abort: Configuration for farm $ms does not found";

	if ( $logging eq 'enabled' )
	{
		&zenlog( $msg );
	}
	else
	{
		print "$msg\n";
	}

	exit -1;
}
else
{
	$fg_conf     = &getFGObject( $fgname );
	$timetocheck = $fg_conf->{ interval };
	$timeout     = $fg_conf->{ timeout };
	if ( $fg_conf->{ command } =~ /(.*);(\w+)\s+((:?\d\s*)+)$/ )
	{
		$check_cmd_tpl = $1;
		@{ $http_prio } = split ( /\s+/, $3 ) if $2 eq "priority";
	}
	else
	{
		$check_cmd_tpl = $fg_conf->{ command };
	}
	$cutConns = $fg_conf->{ cut_conns };
	$useAlias = $fg_conf->{ backend_alias } if ( $useAlias ne 'true' );           #
	$logging  = 'enabled'                   if ( $fg_conf->{ log } eq 'true' );
}

# create farmguardian pidfile
my $filepid = "/var/run/$pidfile";
{
	open ( my $fo, '>', "$filepid" );
	if ( !$fo )
	{
		my $msg = "Cannot open file $filepid: $!";

		if ( $logging eq 'enabled' )
		{
			&zenlog( $msg );
		}
		else
		{
			print "$msg\n";
		}

		die;
	}

	print $fo "$$";
	close $fo;
}

# get farm port to use it if a backend has not defined the port field
require Skudonet::Farm::Config;
my $farm_st = &getFarmStruct( $farmname );

#Ask for the farm type
$type = 'http' if $type eq 'https';

my $proxyctl;
my $portadmin;
my $usemark = 0;

if ( $type eq 'l4xnat' )
{
	require Skudonet::Farm::L4xNAT::Backend;
	$usemark = 1;
}
elsif ( $type eq 'http' )
{
	require Skudonet::Farm::HTTP::Backend;
	require Skudonet::Farm::HTTP::Config;
	require Skudonet::Farm::HTTP::Service;

	$proxyctl  = &getGlobalConfiguration( 'proxyctl' );
	$portadmin = &getHTTPFarmSocket( $farmname );

	my $proxy_ng = &getGlobalConfiguration( 'proxy_ng' );
	$usemark = $proxy_ng eq "true" ? 1 : 0;

}

# This is a cluster bugfix, to ensure the backend status is correct in the config file.
my $first_exec = 1;

#Get servers list
while ( 1 )
{
	my @backendid;
	my @backendserv;
	my @backendport;
	my @backendstatus;
	my @backendprio;
	my @backendmark;
	my @backendorder;
	my $i = 0;

	### Collect variable values for the diferent farm types ###

	# Collect HTTP/S farm variables values
	if ( $type eq 'http' )
	{
		my $proxy_ng = &getGlobalConfiguration( 'proxy_ng' );
		my $status   = &getHTTPFarmStatus( $farmname );
		if ( $status ne "up" )
		{
			my $msg = "Farm $farmname is down, abort.";

			if ( $logging eq 'enabled' )
			{
				&zenlog( $msg );
			}
			else
			{
				print "$msg\n";
			}

			exit 1;
		}

		my $backendsvs = &getHTTPFarmVS( $farmname, $service, "backends" );

		foreach my $line ( split ( "\n", $backendsvs ) )
		{
			my @subbe = split ( ' ', $line );
			$backendmark[$i] = $subbe[15] if $usemark;
			$backendid[$i]   = $subbe[1];
			$backendserv[$i] =
			  ( $useAlias eq 'true' ) ? &getFGAlias( $subbe[3] ) : $subbe[3];
			$backendport[$i]   = $subbe[5];
			$backendstatus[$i] = &getHTTPBackendStatusFromFile( $farmname, $i, $service );
			if ( defined $http_prio )
			{

				if ( $proxy_ng ne "true" )
				{
					if ( defined @{ $http_prio }[$i] )
					{
						$backendprio[$i] = @{ $http_prio }[$i];
					}
					else
					{
						# Priority 1 by default
						$backendprio[$i] = 1;
					}
				}
			}
			$i++;
		}

		# reorder backends by prio if defined
		if ( @backendprio )
		{
			my $index = 0;
			my $order;
			foreach my $prio ( @backendprio )
			{
				push @{ $order->{ $prio } }, $index;
				$index++;
			}
			foreach my $prio ( sort keys %{ $order } )
			{
				push @backendorder, @{ $order->{ $prio } };
			}
		}

		# get the farm's timeout
		#~ $timeout = &getFarmTimeout( $farmname );
	}
	elsif ( $type eq 'l4xnat' )    # Collect L4xNAT farm variables values
	{
		my $be = &getL4FarmServers( $farmname );
		foreach my $l_serv ( @{ $be } )
		{
			$backendid[$i] = $l_serv->{ id };
			$backendserv[$i] =
			  ( $useAlias eq 'true' ) ? &getFGAlias( $l_serv->{ ip } ) : $l_serv->{ ip };
			$backendmark[$i] = hex ( $l_serv->{ tag } ) if $usemark;
			$backendport[$i] = $l_serv->{ port }
			  // $farm_st->{ vport };    # use farm port if backend port is not defined
			$backendport[$i]   = $farm_st->{ vport } if ( $backendport[$i] eq "" );
			$backendprio[$i]   = $l_serv->{ priority };
			$backendstatus[$i] = $l_serv->{ status };
			$i++;
		}
	}

	# Use the default timetocheck as the timeout for the backends response
	if ( !defined $timeout )
	{
		$timeout = $timetocheck;
	}

	# print farm check details
	if ( $logging eq 'enabled' )
	{
		my $logline = '';
		$logline .= "Farm $farmname - ";
		$logline .= "Service $service - " if $service ne '';
		$logline .= "timetocheck $timetocheck - ";
		$logline .= "portadmin $portadmin - " if defined $portadmin;
		$logline .= "command $check_cmd_tpl";
		if ( @backendorder )
		{
			$logline .= " - prio: ";
			foreach my $prio ( @{ $http_prio } )
			{
				$logline .= "$prio ";
			}
		}

		&zenlog( $logline );
	}

	# backend loop. checking every backend.
	my $backendidx = 0;
	my $j;
	my $svc_prio = 1;

	my $logheader;
	my $logline;
	my $command;
  BACKEND_IDX:
	while ( $backendidx < $i )
	{
		if ( @backendorder )
		{
			$j = $backendorder[$backendidx];
		}
		else
		{
			$j = $backendidx;
		}

		if ( $logging eq 'enabled' )
		{
			$logheader = "Farm $farmname - ";
			$logheader .= "Service $service - " if $service ne '';
			$logheader .= "server[$backendid[$j]] $backendserv[$j]";
			$logheader .= ":$backendport[$j]" if $backendport[$j];
			$logline = $logheader;
			$logline .= " - priority $backendprio[$j]" if defined $backendprio[$j];
			$logline .= " - status $backendstatus[$j] - ";
		}

		# jump to next backend if this one is in maintenance
		if ( $backendstatus[$j] =~ /maintenance/ )
		{
			$backendidx++;
			if ( defined $backendprio[$j] )
			{
				if ( $backendprio[$j] <= $svc_prio )
				{
					$svc_prio++;
					if ( $logging eq 'enabled' )
					{
						&zenlog( "$logheader increasing service priority to $svc_prio" );
					}
				}
				$logline .= "service priority $svc_prio";
			}
			if ( $logging eq 'enabled' )
			{
				&zenlog( $logline );
			}
			next BACKEND_IDX;
		}

		$command = $check_cmd_tpl;

		# substitute HOST and PORT variables for this backend's values
		$command =~ s/HOST/$backendserv[$j]/g;
		$command =~ s/PORT/$backendport[$j]/g;

		#execute the binary to check
		$command = "$libexec_dir/$command";

		$command = "MARK=$backendmark[$j] LD_PRELOAD=$fgmarkbin " . $command
		  if ( defined $fgmarkbin && $usemark );

		my @output;
		my $timedout  = 0;
		my $errorcode = '';

		# run actual backend check
		eval {
			local $SIG{ ALRM } = sub { return; };

			#~ alarm $timeout;
			$timedout  = 1 if ( alarm $timeout ) != 0;
			@output    = `$command`;
			$errorcode = $?;
			alarm 0;
		}
		  or do
		{
			my $kid;
			$timedout = 1;

			do
			{
				$kid = waitpid ( -1, WNOHANG );
			} while $kid > 0;
		};

		my $http_prio_enable  = 1;
		my $http_prio_disable = 0;
		if ( @backendorder )
		{
			if ( $backendprio[$j] > $svc_prio )
			{
				$http_prio_enable  = 0;
				$http_prio_disable = 1;

				if ( $backendstatus[$j] eq 'fgDOWN' )
				{
					$http_prio_disable = 0;
				}
			}
		}
		if ( ( defined $backendprio[$j] ) and ( $backendprio[$j] <= $svc_prio ) )
		{
			if (     ( $timedout == 1 or $errorcode != 0 )
				 and ( $backendstatus[$j] eq 'fgDOWN' ) )
			{
				$svc_prio++;
				if ( $logging eq 'enabled' )
				{
					&zenlog( "$logheader increasing service priority to $svc_prio" );
				}
			}
		}

		# being verbose the check output
		if ( $logging eq 'enabled' )
		{
			if ( defined $backendprio[$j] )
			{
				$logline .= "service priority $svc_prio - ";
			}
			&zenlog( $logline . "timedout $timedout - errorcode $errorcode" );
		}

		### Enable backend
		my $auxLog;
		if (
			 (
			   ( $timedout == 0 && $errorcode == 0 && $backendstatus[$j] =~ /down/i )
			   or $first_exec
			 )
			 and $http_prio_enable
		  )
		{
			if ( $logging eq 'enabled' )
			{
				&zenlog(
					"**execution OK in server $j - errorcode:$errorcode - timedout:$timedout - backend state:$backendstatus[$j]"
				);
			}

			# Enabling backend for every type of farm supported
			if ( $type eq 'http' )
			{
				my $idsv = &getFarmVSI( $farmname, $service );
				&logAndRun( "$proxyctl -c $portadmin -B 0 $idsv $j" );
				&setHTTPFarmBackendStatusFile( $farmname, $j, 'active', $idsv );
				$auxLog = " in farm: '$farmname', service: '$service'";
			}
			elsif ( $type eq 'l4xnat' )
			{
				#if ( $cutConns eq 'true' and $backendprio[$j] > 1 ){
				$auxLog = " in farm: '$farmname'";
				&setL4FarmBackendStatus( $farmname, $backendid[$j], 'up' );
				if ( $cutConns eq 'true' )
				{

					#loop the backend array and cut conns for the others
					my $b = 0;

					#while ($b < $i){
					for ( $b = 0 ; $b < $i ; $b++ )
					{
						#do nothing for current backend (j)
						next if $b == $j;

						#do not cut conns if backend prio <= than current backend prio (j)
						next if $backendprio[$b] <= $backendprio[$j];
						if ( $backendprio[$b] > $backendprio[$j] )
						{
							&zenlog( "Cutting priority conns for backend $backendid[$b]" );
							&setL4FarmBackendStatus( $farmname, $backendid[$b], '', 'cut', 'true' );
						}

					}
				}

			}

			$backendstatus[$j] = 'active';

			# WARNING: This message format is expected by 'sec'
			&zenlog( "BackEnd $backendserv[$j]:$backendport[$j] resurrect$auxLog" )
			  if ( !$first_exec );
		}
		### Disable backend
		elsif (
			  (
				( ( $timedout == 1 || $errorcode != 0 ) && $backendstatus[$j] ne 'fgDOWN' )
				or $first_exec
			  )
			  or $http_prio_disable
		  )
		{
			if ( $logging eq 'enabled' )
			{
				&zenlog( "**execution error in ' $command ', output::**\n@output" );
			}

			# Disabling backend for every type of farm supported
			#if exec error put in blacklist the server
			if ( $type eq 'http' )
			{
				my $idsv = &getFarmVSI( $farmname, $service );
				&logAndRun( "$proxyctl -c $portadmin -b 0 $idsv $j" );
				&setHTTPFarmBackendStatusFile( $farmname, $j, 'fgDOWN', $idsv );
				&setHTTPFarmBackendsSessionsRemove( $farmname, $service, $j )
				  if ( $cutConns eq 'true' );

				$auxLog = " in farm: '$farmname', service: '$service'";
			}
			elsif ( $type eq 'l4xnat' )
			{
				if ( $cutConns eq 'true' )
				{
					&setL4FarmBackendStatus( $farmname, $backendid[$j], 'fgDOWN', 'cut' );
				}
				else
				{
					&setL4FarmBackendStatus( $farmname, $backendid[$j], 'fgDOWN' );
				}

				$auxLog = " in farm: '$farmname'";
			}
			if ( defined $backendprio[$j] and ( $backendprio[$j] <= $svc_prio ) )
			{
				$svc_prio++;
				if ( $logging eq 'enabled' )
				{
					&zenlog( "$logheader increasing service priority to $svc_prio" );
				}
			}

			$backendstatus[$j] = 'fgDOWN';

			# WARNING: This message format is expected by 'sec'
			&zenlog( "BackEnd $backendserv[$j]:$backendport[$j] down$auxLog" )
			  if ( !$first_exec );
		}
		$backendidx++;
	}

	$first_exec = 0;

	#~ &zenlog( "backendid " . Dumper( \@backendid ) );
	#~ &zenlog( "backendserv " . Dumper( \@backendserv ) );
	#~ &zenlog( "backendport " . Dumper( \@backendport ) );
	#~ &zenlog( "backendstatus " . Dumper( \@backendstatus ) );

	sleep ( $timetocheck );
}

sub printHelp
{
	print
	  "FarmGuardian v4.1. Check Backends Servers in a Farm and enable or disable the load balancing\n";
	print "\thelp: farmguardian <farmname> [-s <service>] [-l]";
	print "\n";
	print
	  "\t\t-s <service>\t: Launch FarmGuardian for a certain HTTP/S farm service\n";
	print "\t\t-l\t\t: Enable logs\n";
}

sub getFGAlias
{
	my $bk = shift;
	require Skudonet::Config;
	my $alias_file = &getGlobalConfiguration( "configdir" ) . "/alias.conf";

	my $st = &getTiny( $alias_file );

	return $st->{ 'backend' }->{ $bk } // $bk;
}

