#!/usr/bin/perl
###############################################################################
#
#    Skudonet Software License
#    This file is part of the Skudonet Load Balancer software package.
#
#    Copyright (C) 2014-today SKUDONET SL, Sevilla (Spain)
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################

## letsencryptz-autorenew 1.0
# Parameters:
#	--cert <cert>		certificate for the autorenewal
#	--farm <farm>		Farm name which a temporal Service “Let’s Encryptz” is configured in to renew the certificate.
#	--vip <ip>		IP of the system, where a temporal Farm “Let’s Encryptz” is configured to renew the certificate.
#	--force			force the certificate to be renewed even it is not due to be renewal
#	--restart		all the farms using the certificate will be restarted
#	-h			print help

use strict;
use warnings;

use Getopt::Long;
use Switch;
use Skudonet::Config;
use Skudonet::Log;
use Skudonet::LetsencryptZ;

$SIG{ ALRM } = sub { die "timeout" };


#local variables
my $cert_name;
my $farm_name;
my $vip;
my $force;
my $restart;
my $msg;
my $timeout = getGlobalConfiguration( 'le_renewal_timeout' );
$timeout //= 120;
my $output;

GetOptions(
			'cert=s'  => \$cert_name,
			'farm=s'  => \$farm_name,
			'vip=s'   => \$vip,
			'force'   => \$force,
			'restart' => \$restart,
			'help'    => \&help,
);

&zenlog(
	"Executing Letsencrypt certificate '$cert_name' renewal with timeout '$timeout'.",
	"info", "Letsencryptz-renewal"
);

# check params

if ( ( !defined $vip && !defined $farm_name ) )
{
	$msg = "No 'vip' or 'farm' param found.";
	&zenlog( $msg, "ERROR", "Letsencryptz-renewal" );
	exit 2;

	#&help;
}

if ( !defined $cert_name )
{
	$msg = "No 'cert' param found.";
	&zenlog( $msg, "ERROR", "Letsencryptz-renewal" );
	exit 2;

	#&help;
}

# checks
my $le_cert = &getLetsencryptCertificates( $cert_name );
if ( !@{ $le_cert } )
{
	$msg = "Let's Encrypt certificate $cert_name not found!";
	&zenlog( $msg, "ERROR", "Letsencryptz-renewal" );
	exit 2;
}

if ( defined $farm_name )
{
	require Skudonet::Farm::Core;
	my @farm_list = &getFarmsByType( "http" );

	# avoid farmname when no HTTP Farm exists
	if ( !@farm_list )
	{
		$msg = "There is no HTTP Farms in the system, use 'vip' param instead.";
	}
	else
	{
		# check farm has to be listening on port 80 and up
		require Skudonet::Farm::Base;
		if ( &getFarmVip( 'vipp', $farm_name ) ne 80 )
		{
			$msg = "Farm $farm_name must be listening on Port 80.";
		}
		elsif ( &getHTTPFarmStatus( $farm_name ) ne "up" )
		{
			$msg = "Farm $farm_name must be up.";
		}
	}
	if ( $msg )
	{
		&zenlog( $msg, "ERROR", "Letsencryptz-renewal" );
		exit 1;
	}
}

if ( defined $vip )
{
	# check any farm listening on vip and port 80 and up
	my $le_farm_port = 80;
	require Skudonet::Net::Validate;
	if ( &validatePort( $vip, $le_farm_port, "tcp" ) == 0 )
	{
		#vip:port is in use
		require Skudonet::Farm::Base;
		foreach my $farm ( &getFarmListByVip( $vip ) )
		{
			if (     &getHTTPFarmVip( "vipp", $farm ) eq "$le_farm_port"
				 and &getHTTPFarmStatus( $farm ) eq "up" )
			{
				$msg = "Farm $farm is listening on 'vip' $vip and Port $le_farm_port.";
				last;
			}
		}
		if ( not defined $msg )
		{
			$msg =
			  "The system has a process listening on 'vip' $vip and Port $le_farm_port.";
		}
		&zenlog( $msg, "ERROR", "Letsencryptz-renewal" );
		exit 1;
	}
}

# check Email config
my $le_conf = &getLetsencryptConfig();
if ( !$le_conf->{ email } )
{
	my $msg = "LetsencryptZ email is not configured.";
	&zenlog( $msg, "ERROR", "Letsencryptz-renewal" );
	exit 1;
}

$force = $force ? "true" : "false";

my $lock_le_renew = "/tmp/letsencryptz-renew.lock";
if ( not -f $lock_le_renew )
{
	my $touch = &getGlobalConfiguration( 'touch' );
	&logAndRun( "$touch $lock_le_renew" );
}
my $lock_le_renew_fh = &openlock( $lock_le_renew, "w" );
my $error_ref;
eval {
	alarm ( $timeout );
	$error_ref =
	  &runLetsencryptRenew( $cert_name, $farm_name, $vip, $force,
							$lock_le_renew_fh );
	alarm ( 0 );
};

if ( $@ )
{
	if ( $@ =~ /timeout/ )
	{
		$msg =
		  "Error: Timeout '$timeout' reached while renewal Letsencrypt certificate '$cert_name'!.";
	}
	else
	{
		$msg = "Unexpected error found : $@";
	}
}

if ( not defined $error_ref )
{
	&zenlog( $msg, "ERROR", "Letsencryptz-renewal" );
	my $le_farm = &getGlobalConfiguration( 'le_farm' );
	my $action;

	if ( !$farm_name )
	{
		$farm_name = $le_farm;
		$action    = "Recover: Delete the temporal";
	}
	else
	{
		$action = "Recover: Revert the";
	}

	&zenlog( "$action Farm '$farm_name'", "warning", "Letsencryptz-renewal" );
	my $error = &unsetLetsencryptFarmService( $farm_name );
	if ( $error )
	{
		&zenlog( "Error in $action Farm '$farm_name'", "error",
				 "Letsencryptz-renewal" );
	}
	&runLetsencryptLocalWebserverStop();
	&zenlog( "$action Farm '$farm_name' was successful.",
			 "info", "Letsencryptz-renewal" );
	close $lock_le_renew_fh;
	exit 1;
}
elsif ( defined $error_ref and $error_ref->{ code } )
{
	&zenlog( $error_ref->{ desc }, "ERROR", "Letsencryptz-renewal" );
	close $lock_le_renew_fh;
	exit $error_ref->{ code };
}

&zenlog(
	"Success, the Letsencrypt certificate '$cert_name' has been renewed successfully.",
	"info", "Letsencryptz-renewal"
);

if ( defined $restart )
{
	my @farms_restarted;
	my @farms_restarted_error;
	my $cert = $cert_name;
	$cert =~ s/\./\_/g;
	$cert .= ".pem";

	my $error;
	require Skudonet::Farm::Action;
	require Skudonet::Farm::Base;
	require Skudonet::Certificate;
	use Time::HiRes qw(usleep);
	my $max_retry = 5;

	foreach my $farm ( @{ &getCertFarmsUsed( $cert ) } )
	{
		# restart farm used and up
		require Skudonet::Farm::HTTP::Config;
		my $farm_status = &getHTTPFarmStatus( $farm );
		if ( $farm_status eq 'up' )
		{
			my $retry = 1;
			&zenlog( "Restarting farm '$farm' using certificate '$cert_name'.",
					 "info", "Letsencryptz-renewal" );
			while ( ( $farm_status eq "up" ) and ( $retry < $max_retry ) )
			{
				&zenlog(
					"Stopping ( retry $retry/$max_retry ) farm '$farm' using certificate '$cert_name'.",
					"info", "Letsencryptz-renewal"
				);
				$error       = &runFarmStop( $farm, "" );
				$farm_status = &getHTTPFarmStatus( $farm );
				$retry++;
				usleep 500;
			}
			if ( $farm_status eq "up" )
			{
				&zenlog( "Farm '$farm' using certificate '$cert_name' can not been stopped.",
						 "info", "Letsencryptz-renewal" );
				push @farms_restarted_error, $farm;
				next;
			}
			&zenlog(
				   "Farm '$farm' using certificate '$cert_name' has been stopped successfully.",
				   "info", "Letsencryptz-renewal" );

			$retry = 1;
			while ( ( $farm_status ne "up" ) and ( $retry < $max_retry ) )
			{
				&zenlog(
					"Starting ( retry $retry/$max_retry ) farm '$farm' using certificate '$cert_name'.",
					"info", "Letsencryptz-renewal"
				);
				$error       = &runFarmStart( $farm, "" );
				$farm_status = &getHTTPFarmStatus( $farm );
				$retry++;
				usleep 500;
			}
			if ( $farm_status ne "up" )
			{
				&zenlog( "Farm '$farm' using certificate '$cert_name' can not been started.",
						 "info", "Letsencryptz-renewal" );
				push @farms_restarted_error, $farm;
				next;
			}
			&zenlog(
				   "Farm '$farm' using certificate '$cert_name' has been started successfully.",
				   "info", "Letsencryptz-renewal" );
			push @farms_restarted, $farm;
		}
	}


	my $info_msg;
	if ( @farms_restarted )
	{
		$info_msg =
		  "The following farms were been restarted: " . join ( ", ", @farms_restarted );
	}
	if ( @farms_restarted_error )
	{
		$info_msg .= "The following farms could not been restarted: "
		  . join ( ", ", @farms_restarted_error );
	}

	&zenlog( "$info_msg.", "info", "Letsencryptz-renewal" ) if defined $info_msg;

}
&zenlog(
	"The Letsencrypt certificate '$cert_name' renewal with timeout '$timeout' has been executed succesfully.",
	"info", "Letsencryptz-renewal"
);

exit 0;
